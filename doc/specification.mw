==Legal Notice==

Please check the [[FI-WARE Open Specifications Legal Notice ]] to understand the rights to use FI-WARE Open Specifications.

==Introduction==

The Stream-oriented API is a RESTful resource-oriented API accessed via HTTP/HTTPS that uses JSON-based representations for information exchange. This document describes the API exposed by the Application Server as defined in the [[FIWARE.ArchitectureDescription.Data.StreamOriented | GE Architecture Description]].

==Intended Audience==

This specification is intended for both software developers and implementors of this GE. For developers, this document details the RESTful API to build interactive multimedia applications compliant with the [[FIWARE.ArchitectureDescription.Data.StreamOriented  | GE Architecture Description]]. Implementors can build their GEi APIs based on the information contained in this specification.

Before reading this document it is recommended to read first the [[FIWARE.ArchitectureDescription.Data.StreamOriented  | GE Architecture Description]] and the [[StreamOriented_-_User_and_Programmers_Guide | Programmers Guide]]. Moreover, the reader should be also familiar with:

* RESTful web services
* [http://www.ietf.org/rfc/rfc2616.txt HTTP/1.1 (RFC2616)]
* [http://www.ietf.org/rfc/rfc4627.txt?number=4627 JSON] data serialization format.

==Conventions used in this document==

Some special notations are applied to differentiate some special words or concepts. The following list summarizes these special notations:

* A '''bold''', mono-spaced font is used to represent code or logical entities, e.g., HTTP method ('''GET''', '''PUT''', '''POST''', '''DELETE''').
* An ''italic'' font is used to represent document titles or some other kind of special text, e.g., ''URI''.
* Variables are represented between brackets, e.g. ''{id}'', and in italic font. When the reader finds one, it can assume that the variable can be changed for any value.

=API General Features=

The GE defines three types of managers: the Content Manager, the Media Manager and the Call Manager. However, in its current version, the Content Manager is the only component available.

==Authentication==

Each HTTP request in an API may require the inclusion of specific authentication credentials. The specific implementation of the API implemented by a given Generic Enabler implementor (GEi) may support multiple authentication schemes (OAuth, Basic Auth, Token) to be determined by the specific provider that implements the GE.

==Representation Transport==

Resource representation is transmitted between client and server by using HTTP 1.1 protocol, as defined by IETF RFC-2616. Each time an HTTP request contains payload, a Content-Type header shall be used to specify the MIME type of wrapped representation. In addition, both client and server may use as many HTTP headers as they consider necessary.

==Representation Format==

Stream-oriented RESTful APIs support JSON as representation format for request and response parameters following the recommendations in the proposal [http://www.simple-is-better.org/json-rpc/jsonrpc20-over-http.html JSON-RPC over HTTP].

The format of the requests is specified by using the ''Content-Type'' header with a value of ''application/json-rpc'' and is required for requests containing a body. The format required for the response is specified in the request by setting the ''Accept'' header to the value ''application/json-rpc'', that is, request and response bodies are serialized using the same format.

===Request object===

An ''RPC call'' is represented by sending a ''Request object'' to a server. The ''Request object'' has the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''method'': a string containing the name of the method to be invoked.
*''params'': a structured value that holds the parameter values to be used during the invocation of the method. This member may be omitted.
*''id'': an identifier established by the client that contains a string or number. The server must reply with the same value in the ''Response object''. This member is used to correlate the context between both objects.

===Successful Response object===

When an ''RPC call'' is made the server replies with a ''Response object''. In the case of a successful response, the ''Response object'' will contain the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''result'': its value is determined by the method invoked on the server.
*''id'': this member is mandatory and it must match the value of the ''id'' member in the ''Request object''.

===Error Response object===

When an ''RPC call'' is made the server replies with a ''Response object''. In the case of an error response, the ''Response object'' will contain the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''error'': an object describing the error through the following members:
**''code'': an integer number that indicates the error type that occurred.
**''message'': a string providing a short description of the error.
**''data'': a primitive or structured value that contains additional information about the error. It may be omitted. The value of this member is defined by the server.
*''id'': this member is mandatory and it must match the value of the ''id'' member in the ''Request object''. If there was an error in detecting the ''id'' in the ''Request object'' (e.g. Parse Error/Invalid Request), it equals to null.

===Example===

The following is a self-explanatory example of how to use JSON-RPC over HTTP:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
--> 
POST /ENDPOINT HTTP/1.1
Host: ...
Content-Type: application/json-rpc
Content-Length: ...

{"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": 1}

<-- 
HTTP/1.1 200 OK
...
Content-Type: application/json-rpc

{"jsonrpc": "2.0", "result": 19, "id": 1}


--> 
POST /ENDPOINT HTTP/1.1
Host: ...
Content-Type: application/json-rpc
Content-Length: ...

{"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 2}

<-- 
HTTP/1.1 200 OK
...
Content-Type: application/json-rpc

{"jsonrpc": "2.0", "result": 19, "id": 2}


--> 
POST /ENDPOINT HTTP/1.1
Host: ...
Content-Type: application/json-rpc
Content-Length: ...

{"jsonrpc": "2.0", "method": "foobar", "id": 3}

<-- 
HTTP/1.1 404 Method not found
...
Content-Type: application/json-rpc

{"jsonrpc": "2.0", "error": {"code": -32601, "message": "Method not found."}, "id": 3}
</pre>

==Limits==
Capacity can be limited in order to prevent the abuse of the system. These limitations will be configured by the operator and may differ from one implementation of the GE to another.

===Rate Limits===

(These limits are specified both in human readable wild-card and in regular expressions and will indicate for each HTTP verb which will be the maximum number of operations per time unit that a user can request. After each unit time the counter is initialized again - '''TO DO''').

In the event a request exceeds the thresholds established for the account, a 413 HTTP response will be returned with a Retry-After header to notify the client when a new attempt can be issued.

===Absolute Limits===

(In this case, absolute values are specified, e.g. maximum total amount of RAM (MB) - '''TO DO''').

===Determining Limits Programmatically===

Applications can use the '''GET''' verb with the ''/limits'' URI in order to retrieve this information.


{| border="1" cellpadding="2"
|-
||'''Verb'''||'''URI'''||'''Description'''
|-
||'''GET''' ||''/limits''||Returns the current limits for your account 
|}


This operation returns Normal response code(s), e.g. 200 or 203 and manages some possible errors like compute fault, service unavailable, unauthorized operation, forbidden, bad request, bad method or operation over limit.

(This operation will not need a request body but each FI-WARE RESTful API specifies what is the list of normal response code(s) and the list of error response code(s) followed by some examples in appropriate representation format (XML and/or JSON) of potential responses to this operation - '''TO DO''').

=API Specification=

This section details the actual APIs of each of the managers defined in this GE, namely, the Content Manager API. It is recommended to review the [[StreamOriented_-_User_and_Programmers_Guide | Programmers Guide]] before proceeding with this section.

==Content Manager API==

The Content Manager API is exposed in the form of four services: ''PlayerService'', ''RecorderService'', ''RTPMediaService'' and ''WebRTCMediaService'' described in the following subsections.

===PlayerService===

This service allows requesting a content to be retrieved from a Media Server using HTTP pseudostreaming.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the PlayerService application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}


The ''Request object'' (body of the HTTP request) can contain one of these two methods: ''start'', ''terminate''.

====start====

Requests the retrieval of the content. The parameter ''constraints'' indicates the kind of media (audio or/and video) to be received by setting their values to ''recv'' or ''none''. The following example shows a ''Request object'' requesting only audio:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "start",
"params": {"constraints": {"audio": "recv", "video": "none"}},
"id": 1
}
</pre>

The ''Response object'' contains a ''sessionId'' to identify the session and the actual URL to retrieve the content from:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {"url": "http://mediaserver/a13e9469-fec1-4eee-b40c-8cd90d5fc155", "sessionId": 1234},
"id": 1
}
</pre>

====terminate====

Requests the termination of the session identified by ''sessionId'' so the server can release the resources assigned to it:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "terminate",
"params": {"sessionId": 1234},
"id": 2
}
</pre>

The ''Response object'' is an empty object:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {},
"id": 2
}
</pre>

====Simplified alternative approach====

The PlayerService API just described is consistent with the rest of APIs defined in the Stream-oriented GE. However, it is recommended to also expose a simpler API as described here not requiring the use of JSON.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''GET'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Requests ''{ContentID}'' to be served according to the application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application
|}


Successful Response Codes: 200 OK, 307 Temporary Redirect (to the actual content).

Error Response Codes: 401 Unauthorized, 403 Forbidden, 500 Internal Server Error.

===RecorderService===

This service allows the upload of a content through HTTP to be stored in a Media Server.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the RecorderService application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}


The ''Request object'' (body of the HTTP request) can contain one of these two methods: ''start'', ''terminate''.

====start====

Requests the storage of the content. The parameter ''constraints'' indicates the kind of media (audio or/and video) to be sent by setting their values to ''send'' or ''none''. The following example shows a ''Request object'' describing that both audio and video will be uploaded:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "start",
"params": {"constraints": {"audio": "send", "video": "send"}},
"id": 1
}
</pre>

The ''Response object'' contains a ''sessionId'' to identify the session and the actual URL to upload the content to:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {"url": "http://mediaserver/a13e9469-fec1-4eee-b40c-8cd90d5fc155", "sessionId": 1234},
"id": 1
}
</pre>

====terminate====

Requests the termination of the session identified by ''sessionId'' so the server can release the resources assigned to it:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "terminate",
"params": {"sessionId": 1234},
"id": 2
}
</pre>

The ''Response object'' is an empty object:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {},
"id": 2
}
</pre>

====Simplified alternative approach====

The RecorderService API just described is consistent with the rest of APIs defined in the Stream-oriented GE. However, it is recommended to also expose a simpler API as described here not requiring the use of JSON.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Uploads ''{ContentID}'' to be stored according to the application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application
|}


The request body of this method is the content to be uploaded.

Successful Response Codes: 200 OK, 307 Temporary Redirect (to the actual storage server)

Error Response Codes: 401 Unauthorized, 403 Forbidden, 500 Internal Server Error

===RTPMediaService===

This service allows establishing an ''RTP media session'' between the client performing the request and a Media Server.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the RTPMediaService application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}


The ''Request object'' (body of the HTTP request) can contain one of these three methods: ''start'', ''poll'', ''terminate''.

====start====

Requests the establishment of the RTP session. The parameter ''sdp'' contains the client SDP (Session Description Protocol) offer, that is, a description of the desired session from the caller's perspective. The parameter ''constraints'' indicates the media (audio or/and video) to be received, sent, or sent and received by setting their values to ''recv'', ''send'', ''sendrecv'' or ''none''. The following example shows a ''Request object'' requesting bidirectional audio and video:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "start",
"params": {"sdp": "Contents_of_Caller_SDP", "constraints": {"audio": "sendrecv", "video": "sendrecv"}},
"id": 1
}
</pre>

The ''Response object'' contains the Media Server SDP answer, that is, a description of the desired session from the callee's perspective, and a ''sessionId'' to identify the session:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {"sdp": "Contents_of_Callee_SDP", "sessionId": 1234},
"id": 1
}
</pre>

====poll====

This method allows emulating ''push events'' coming from the server by using a technique kown as ''long polling''. With long polling, the client requests information from the server in a way similar to a normal polling; however, if the server does not have any information available for the client, instead of sending an empty response, it holds the request and waits for information to become available until a timeout is expired. If the timeout is expired before any information has become available the server sends an empty response and the client re-issues a new poll request. If, on the contrary, some information is available, the server pushes that information to the client and then the client re-issues a new poll request to restart the process.

The only parameter in the request is the session identifier (''sessionId''):

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "poll",
"params": {"sessionId": 1234},
"id": 2
}
</pre>

The ''response object'' includes only an ''events'' attribute containing an array with the latest ''events'' for this session, or an empty object if none was generated:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {"events": [{"type": "event1"}, {"type": "event2"}]},
"id": 2
}
</pre>

====terminate====

Requests the termination of the session identified by ''sessionId'' so the server can release the resources assigned to it:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"method": "terminate",
"params": {"sessionId": 1234},
"id": 3
}
</pre>

The ''Response object'' is an empty object:

<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  
word-wrap: break-word">
{
"jsonrpc": "2.0",
"result": {},
"id": 3
}
</pre>

===WebRTCMediaService===

Conceptually, ''RTPMediaService'' and ''WebRTCMediaService'' are very similar, the main difference is the underlying protocol to exchange media, so all the descriptions in the section above apply to ''WebRTCMediaServer''.
