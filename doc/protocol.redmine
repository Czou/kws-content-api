h1. Kurento HTML5 API

h2. How to use the API

The API is composed only by one class, WebRtcContent. This class has in its constructor two fields, one for the URL where is located the WebRTC endpoint server that receive the codified url to the requested pipelined stream and automaticaly try to connect to it, and another for the optional configurations using a mapping object. In it we can set how we want to get the connection streams (send, receive, both or none) both for audio and video streams, being the only forbidden combination to don't send nor receive nothing, or using invalid values to set them. This is notified to the user raising a RangeError exception. By default, the class will try to make an audio & video bi-directional communication.

On the options field, you can also be able to set the STUN/TURN and ICE servers, using as key the field 'iceServers' and as value an array of objects having defined their url and credential. If nothing is specified, it will use Google STUN server by default.

Also you can set the id of some video tags on the keys 'localVideoTag' and 'remoteVideoTag' to fill automatically the video tags for the local and remove video stream. In the future, it will be allowed to use also an audio tags for the receiving stream if it was requested an audio only stream without video.

Finally, you can also set some callback functions to the instance generated by the WebRtcContent class:

* *onerror*: an error has occurred, and the connection has been clossed automatically.
* *onmediaevent*: a new media event was send by the WebRTC server endpoint. This dispatched event has a 'data' attribute and its meaning is particular to each pipeline being processed.
* *onlocalstream*: the requested local stream is available. The dispatched event has a 'stream' attribute with the local WebRTC video stream. Also, if localVideoTag was defined on the constructor, this stream will be set there.
* *onremotestream*: the requested remote stream is available. The dispatched event has a 'stream' attribute with the remote WebRTC video stream. Also, if remoteVideoTag was defined on the constructor, this stream will be set there.
* *onstart*: connection was successfuly stablished.
* *onterminate*: connection was finished without errors, both by us or by the WebRTC server endpoint.

h2. Messages protocol

The protocol to comunicate with the WebRTC server endpoint is based on "JSON-RPC 2.0 over HTTP":http://www.simple-is-better.org/json-rpc/jsonrpc20-over-http.html, using the next messages:

* *start*: does the initial connection request to the WebRTC server endpoint.
> *params*: an object with only a 'sdp' attribute containing the offer SDP.
>
> @{
> "jsonrpc": "2.0",
> "method": "start",
> "params": {"sdp": "veryLargeOfferSDP"}
> }@
>
> *result*: an object with a 'sdp' attribute containing the answer SDP, and a 'sessionId' attribute with the ID generated by the server for this client session.
>
> @{
> "jsonrpc": "2.0",
> "result": {"sdp": "veryLargeOfferSDP", "sessionId": 1234}
> }@
>
* *pool*: request a list with the latest MediaEvents.
> *params*: an object with only a 'sessionId' attribute containing the ID for this session.
>
> @{
> "jsonrpc": "2.0",
> "method": "poll",
> "params": {"sessionId": 1234}
> }@
>
> *result*: an object with only a 'events' attribute containing an array with the latest MediaEvents for this session, or an empty object if none was generated.
>
> @{
> "jsonrpc": "2.0",
> "result": {"events": [{"type": "evnet1"}, {"type": "evnet2"}]}
> }@
>
* *terminate*: request explicitly to the WebRTC media server to close the connection.
> *params*: an object with only a 'sessionId' attribute containing the ID for this session.
>
> @{
> "jsonrpc": "2.0",
> "method": "terminate",
> "params": {"sessionId": 1234}
> }@
>
> *result*: an empty object.
>
> @{
> "jsonrpc": "2.0",
> "result": {}
> }@